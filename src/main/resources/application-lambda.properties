# Lambda-specific configuration
# This profile is activated when running on AWS Lambda

# AWS Lambda Configuration
spring.main.web-application-type=servlet
spring.main.lazy-initialization=true
spring.main.banner-mode=off
spring.jmx.enabled=false

# AWS Configuration for Lambda
aws.region=${/presupuesto/aws/region:${AWS_REGION:us-east-2}}
aws.dynamodb.endpoint=${/presupuesto/aws/dynamodb/endpoint:${DYNAMODB_ENDPOINT:}}
aws.dynamodb.table.prefix=${/presupuesto/aws/dynamodb/table/prefix:${TABLE_PREFIX:presupuesto-}}

# AWS Region Configuration for Spring Cloud
spring.cloud.aws.region.static=${AWS_REGION:us-east-2}
spring.cloud.aws.credentials.instanceProfile=true

# Lambda doesn't need embedded server configuration
server.port=${/presupuesto/server/port:8080}
server.ssl.enabled=false
server.servlet.context-path=/

# Security Configuration for Lambda
# Authentication is handled by API Gateway Authorizer, but we can disable it for testing
security.auth.enabled=${/presupuesto/security/auth/enabled:true}

# API Gateway Authorizer Configuration
# Authentication is handled by API Gateway Authorizer
# User information is passed through request context
api.gateway.authorizer.enabled=true
api.gateway.user.header.name=${/presupuesto/api-gateway/user-header-name:${API_GATEWAY_USER_HEADER:x-user-id}}
api.gateway.roles.header.name=${/presupuesto/api-gateway/roles-header-name:${API_GATEWAY_ROLES_HEADER:x-user-roles}}
api.gateway.email.header.name=${/presupuesto/api-gateway/email-header-name:${API_GATEWAY_EMAIL_HEADER:x-user-email}}

# CORS Configuration (Parameter Store fallback)
cors.allowed-origins=${/presupuesto/cors/allowed-origins:${CORS_ALLOWED_ORIGINS:*}}
cors.allowed-methods=${/presupuesto/cors/allowed-methods:${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}}
cors.allowed-headers=${/presupuesto/cors/allowed-headers:${CORS_ALLOWED_HEADERS:*}}

# Lambda timeout considerations
spring.jpa.defer-datasource-initialization=false
spring.datasource.initialization-mode=never

# Swagger/OpenAPI Configuration for Lambda
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.try-it-out-enabled=true
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.filter=true
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json
springdoc.show-actuator=false
# Enable Swagger UI for Lambda
springdoc.swagger-ui.disable-swagger-default-url=false

# OpenAPI Server Configuration (Parameter Store fallback)
openapi.development.server.url=${/presupuesto/openapi/development/server/url:http://localhost}
openapi.production.server.url=${/presupuesto/openapi/production/server/url:}
openapi.cloudfront.url=${/presupuesto/openapi/cloudfront/url:}

# Lambda Function URL (will be set by environment variable)
lambda.function.url=${LAMBDA_FUNCTION_URL:}

# Logging configuration for Lambda
logging.level.com.cdc.presupuesto=DEBUG
logging.level.software.amazon.awssdk=INFO
logging.level.io.awspring.cloud=INFO
logging.level.org.springframework=${/presupuesto/logging/level/org/springframework:INFO}
logging.level.root=INFO
# Suppress unnecessary logs in Lambda
logging.level.org.apache.coyote.http11.Http11InputBuffer=WARN
logging.level.org.apache.coyote.http11.Http11Processor=WARN
logging.level.org.apache.catalina.connector=WARN
logging.level.org.apache.tomcat.util.net=WARN
logging.level.org.apache.coyote=WARN
# Lambda-optimized logging patterns
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
