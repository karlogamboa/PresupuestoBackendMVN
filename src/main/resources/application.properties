# AWS Region Configuration
spring.cloud.aws.region.static=${AWS_REGION:us-east-2}

# AWS Parameter Store integration (these keys will be resolved from SSM Parameter Store if present)
# The environment part (/qa/) is configurable based on ENVIRONMENT variable
aws.region=${/fin/${ENVIRONMENT:dev}/presupuesto/aws/region:${AWS_REGION:us-east-2}}
aws.dynamodb.table.prefix=${/fin/${ENVIRONMENT:dev}/presupuesto/aws/dynamodb/table/prefix:${TABLE_PREFIX:fin-dynamodb-${ENVIRONMENT:dev}-presupuesto-}}

# DynamoDB table names (dynamic by environment)
aws.dynamodb.table.proveedores=${aws.dynamodb.table.prefix}proveedores
aws.dynamodb.table.categoriasGasto=${aws.dynamodb.table.prefix}categorias-gasto
aws.dynamodb.table.solicitudes=${aws.dynamodb.table.prefix}solicitudes
aws.dynamodb.table.departamentos=${aws.dynamodb.table.prefix}departamentos
aws.dynamodb.table.scim-users=${aws.dynamodb.table.prefix}scim-users
aws.dynamodb.table.scim-groups=${aws.dynamodb.table.prefix}scim-groups

# Security Configuration
security.auth.enabled=${/fin/${ENVIRONMENT:dev}/presupuesto/security/auth/enabled:false}

# API Gateway Authorizer Configuration (for when running behind API Gateway)
api.gateway.authorizer.enabled=${/fin/${ENVIRONMENT:dev}/presupuesto/api-gateway/authorizer-enabled:false}
api.gateway.user.header.name=${/fin/${ENVIRONMENT:dev}/presupuesto/api-gateway/user-header-name:x-user-id}
api.gateway.roles.header.name=${/fin/${ENVIRONMENT:dev}/presupuesto/api-gateway/roles-header-name:x-user-roles}
api.gateway.email.header.name=${/fin/${ENVIRONMENT:dev}/presupuesto/api-gateway/email-header-name:x-user-email}

# CORS Configuration
cors.allowed-origins=${/fin/${ENVIRONMENT:dev}/presupuesto/cors/allowed-origins:https://d3i4aa04ftrk87.cloudfront.net}
cors.allowed-methods=${/fin/${ENVIRONMENT:dev}/presupuesto/cors/allowed-methods:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${/fin/${ENVIRONMENT:dev}/presupuesto/cors/allowed-headers:*,X-User-Roles,X-User-Id,X-User-Email,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token}


# Desactiva el filtro characterEncodingFilter en Lambda para evitar doble registro
spring.web.encoding.enabled=false

# Email sender address (must be SES verified)
email.from=${/fin/${ENVIRONMENT:dev}/presupuesto/aws/ses/email/from:karlo@zicral.com}

# SCIM Configuration
scim.token=${/fin/${ENVIRONMENT:dev}/presupuesto/scim/token:scim-2025-dev-BEARER-2f8c1e7a4b7d4e8c9a1f6b3c2d5e7f8a}

# Stage dinámico según el entorno
stage=/${ENVIRONMENT:dev}

# SAML2 Configuration
spring.security.saml2.relyingparty.registration.okta.assertingparty.entity-id=http://www.okta.com/exktk0zp60SxIlgtc697
spring.security.saml2.relyingparty.registration.okta.assertingparty.metadata-uri=https://trial-4567848.okta.com/app/exktk0zp60SxIlgtc697/sso/saml/metadata

# Configuración de AWS
amazon.aws.region=us-east-2