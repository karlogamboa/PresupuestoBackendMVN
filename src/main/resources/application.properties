# Application Configuration - Lambda Focused
# Note: These server configurations are only used for local development
# In Lambda, API Gateway handles HTTP/HTTPS and routing

# Local development server configuration (not used in Lambda)
server.port=8080
server.ssl.enabled=false

# Handle proxy headers from CloudFront/Load Balancer (for Lambda behind API Gateway)
server.forward-headers-strategy=framework




# AWS Region Configuration
spring.cloud.aws.region.static=${AWS_REGION:us-east-1}
spring.cloud.aws.credentials.instanceProfile=true

# AWS Parameter Store integration (these keys will be resolved from SSM Parameter Store if present)
# The environment part (/qa/) is configurable based on active profile
aws.region=${/fin/${spring.profiles.active:dev}/presupuesto/aws/region:${AWS_REGION:us-east-2}}
aws.dynamodb.endpoint=${/fin/${spring.profiles.active:dev}/presupuesto/aws/dynamodb/endpoint:${DYNAMODB_ENDPOINT:}}
aws.dynamodb.table.prefix=${/fin/${spring.profiles.active:dev}/presupuesto/aws/dynamodb/table/prefix:${TABLE_PREFIX:fin-dynamodb-${spring.profiles.active:dev}-presupuesto-}}

# Security Configuration
# Set to false to disable authentication (for testing in Lambda or development)
security.auth.enabled=${/fin/${spring.profiles.active:dev}/presupuesto/security/auth/enabled:true}

# API Gateway Authorizer Configuration (for when running behind API Gateway)
api.gateway.authorizer.enabled=${/fin/${spring.profiles.active:dev}/presupuesto/api-gateway/authorizer-enabled:false}
api.gateway.user.header.name=${/fin/${spring.profiles.active:dev}/presupuesto/api-gateway/user-header-name:x-user-id}
api.gateway.roles.header.name=${/fin/${spring.profiles.active:dev}/presupuesto/api-gateway/roles-header-name:x-user-roles}
api.gateway.email.header.name=${/fin/${spring.profiles.active:dev}/presupuesto/api-gateway/email-header-name:x-user-email}

# CORS Configuration (Parameter Store fallback)
cors.allowed-origins=${/fin/${spring.profiles.active:dev}/presupuesto/cors/allowed-origins:https://d3i4aa04ftrk87.cloudfront.net}
cors.allowed-methods=${/fin/${spring.profiles.active:dev}/presupuesto/cors/allowed-methods:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${/fin/${spring.profiles.active:dev}/presupuesto/cors/allowed-headers:*}

# Logging Configuration
logging.level.com.cdc.presupuesto=DEBUG
logging.level.software.amazon.awssdk=INFO
logging.level.io.awspring.cloud=DEBUG
logging.level.org.springframework=${/fin/${spring.profiles.active:dev}/presupuesto/logging/level/org/springframework:INFO}
logging.level.org.apache.coyote.http11.Http11InputBuffer=WARN
logging.level.org.apache.coyote.http11.Http11Processor=WARN
logging.level.org.apache.catalina.connector=WARN
logging.level.org.apache.tomcat.util.net=WARN
# Suppress TLS parsing errors that occur when HTTPS requests hit HTTP endpoint
logging.level.org.apache.coyote=WARN

# Swagger/OpenAPI Configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=false
springdoc.swagger-ui.try-it-out-enabled=true
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.filter=true
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json
springdoc.show-actuator=false

# OpenAPI Server Configuration (Parameter Store fallback)
openapi.development.server.url=${/fin/${spring.profiles.active:dev}/presupuesto/openapi/development/server/url:http://localhost:8080}
openapi.production.server.url=${/fin/${spring.profiles.active:dev}/presupuesto/openapi/production/server/url:}
openapi.cloudfront.url=${/fin/${spring.profiles.active:dev}/presupuesto/openapi/cloudfront/url:https://d3i4aa04ftrk87.cloudfront.net}
